// Copyright 2020 Knowledge Expert SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {I, Selector} from 'test-maker';
import {methodOptions, Options} from '../../helpers/options/methodOptions';
import {controlsCommonActions} from './controls/controlsCommonActions';

export class Menu {

    private actualOptions;

    async focus(text: string, options?: { timeout?: number, interval?: number, retries?: number }) {
        this.actualOptions = methodOptions.setOptions(options);
        await I.focus(Selector(".menu-item-title-wrap", this.actualOptions).withText(text));
    }

    async select(text: string,options?: { timeout: number, interval?: number, retries?: number }) {
        this.actualOptions = methodOptions.setOptions(options);
        await I.waitForSelectorToBeVisible(Selector(".menu-item-title-wrap", this.actualOptions).withText(text));
        await I.click(Selector(".menu-item-title-wrap", this.actualOptions).withText(text));
    }

    async selectByExactText(text: string, options?: { timeout: number, interval?: number, retries?: number }) {
        this.actualOptions = methodOptions.setOptions(options);
        await I.waitForSelectorToBeVisible(Selector(".menu-item-title-wrap", this.actualOptions).withExactText(text))
        .click(Selector(".menu-item-title-wrap", this.actualOptions).withExactText(text));
    }

    async shouldContainTheItemWithExactText(text: string, options?: { timeout: number, interval?: number, retries?: number }) {
        this.actualOptions = methodOptions.setOptions(options);
        await I.expectSelector(Selector(".menu-item-title-wrap", this.actualOptions).withExactText(text)).toBeVisible();
    }

    async shouldNotContainTheItemWithExactText(text: string, options?: { timeout: number, interval?: number, retries?: number }) {
        this.actualOptions = methodOptions.setOptions(options);
        await I.expectSelector(Selector(".menu-item-title-wrap", this.actualOptions).withExactText(text)).not.toBeVisible();
    }

    async selectByIndex(text: string, index: number, options?: { timeout: number, interval?: number, retries?: number }) {
        this.actualOptions = methodOptions.setOptions(options);
        await I.waitForSelectorToBeVisible(Selector(".menu-item-title-wrap", this.actualOptions).withText(text).nth(index));
        await I.click(Selector(".menu-item-title-wrap", this.actualOptions).withText(text).nth(index));
    }
}
