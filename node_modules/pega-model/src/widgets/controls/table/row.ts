// Copyright 2019 Knowledge Expert SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Cell} from './cell';
import {I, Selector} from 'test-maker';
import {controlsCommonActions} from '../controlsCommonActions';
import {methodOptions, Options} from '../../../../helpers/options/methodOptions';

export class Row {

    readonly element: string;
    readonly elements: string;

    constructor(container: string) {
        this.element = container;
        this.elements = `${this.element}//td`;
    }

    private actualOptions;

    cell(columnTitleOrIndexStartingFromOne: string | number): Cell {
        if (typeof columnTitleOrIndexStartingFromOne === 'string') {
            return new Cell(`${this.element}//td[contains(text(), ${columnTitleOrIndexStartingFromOne})]`)
        }
        if (columnTitleOrIndexStartingFromOne < 1) {
            throw new Error('cell index should start from 1');
        }
        return new Cell(`${this.element}//td[${columnTitleOrIndexStartingFromOne}]`)
    }

    async hover(options?: { timeout?: number, interval?: number, retries?: number }) {
        this.actualOptions = methodOptions.setOptions(options);
        await I.hover(Selector(this.element, this.actualOptions).filterVisible());
    }

    async hoverAndClick(options?: { timeout?: number, interval?: number, retries?: number }) {
        await this.hover(options);
        await this.click(options);
    }

    async click(options?: { timeout?: number, interval?: number, retries?: number }) {
        await controlsCommonActions.click(this.element, options);
    }

    async shouldBeVisible(options?: { timeout?: number, assertionTimeout?: number, interval?: number, retries?: number }) {
        await controlsCommonActions.shouldBeVisible(this.element, options);
    }

    async shouldNotBeVisible(index?: number, options?: { timeout?: number, assertionTimeout?: number, interval?: number, retries?: number }) {
        await controlsCommonActions.shouldNotBeVisible(this.element, options);
    }
}