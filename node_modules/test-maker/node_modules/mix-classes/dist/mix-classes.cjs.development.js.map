{"version":3,"file":"mix-classes.cjs.development.js","sources":["../src/getMixin.ts","../src/createMixinClass.ts","../src/Mix.ts","../src/Generic.ts"],"sourcesContent":["import { Constructable } from './types'\r\nimport { INSTANCE_THIS } from './createMixinClass'\r\n\r\n/**\r\n * Gets a specific mixin's `this`\r\n * @param instance The this object to search on\r\n * @param MixinClass The mixin you want to find\r\n */\r\nexport const getMixin = <TConstructable extends Constructable>(\r\n  instance: any,\r\n  MixinClass: TConstructable\r\n): TConstructable['prototype'] | undefined => {\r\n  if (instance && instance[INSTANCE_THIS]) {\r\n    return instance[INSTANCE_THIS].get(MixinClass)\r\n  }\r\n  return undefined\r\n}\r\n","import { getMixin } from './getMixin'\r\nimport { Constructable, Mixable, Mixin } from './types'\r\n\r\nexport const INSTANCE_THIS = Symbol('instanceThis')\r\nexport const MIXIN_CLASSES = Symbol('mixinClasses')\r\n\r\nconst extend = (base: any, extension: any) =>\r\n  new Proxy(base, {\r\n    get: (_, prop) => {\r\n      const target = prop in extension ? extension : base\r\n\r\n      return target[prop]\r\n    },\r\n    set: (_, prop, value) => {\r\n      const target = prop in extension ? extension : base\r\n      target[prop] = value\r\n\r\n      return true\r\n    },\r\n  })\r\n\r\nconst extractConstructable = (Mixable: Mixable): Constructable =>\r\n  'prototype' in Mixable ? Mixable : Mixable.Class\r\n\r\nexport const createMixinClass = <TMixables extends Mixable[]>(\r\n  Mixables: TMixables\r\n) => {\r\n  const Classes = Mixables.map(extractConstructable)\r\n\r\n  const MixinClass = class MixinClass {\r\n    static [MIXIN_CLASSES] = Classes;\r\n\r\n    // Stores the `this` proxies for each class\r\n    [INSTANCE_THIS] = new WeakMap()\r\n\r\n    constructor(...classesArgs: any[]) {\r\n      Classes.forEach((Class, i) => {\r\n        const instance = new Class(...(classesArgs[i] || []))\r\n        const instanceThis = extend(this, instance)\r\n\r\n        this[INSTANCE_THIS].set(Class, instanceThis)\r\n\r\n        // Copy over getters to instance values\r\n        Object.keys(instance).forEach(key => {\r\n          Object.defineProperty(this, key, {\r\n            configurable: true,\r\n            enumerable: true,\r\n            get() {\r\n              return instance[key]\r\n            },\r\n            set(value) {\r\n              return (instance[key] = value)\r\n            },\r\n          })\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  Classes.forEach(Class => {\r\n    const restoreThisInsideFunction = (fn: Function) =>\r\n      function(this: typeof MixinClass['prototype'], ...args: any[]) {\r\n        return fn.apply(getMixin(this, Class), args)\r\n      }\r\n\r\n    // Copy over prototype methods\r\n    const recursePrototype = (prototype: Constructable['prototype']) => {\r\n      // Add instanceof support\r\n      const hasInstance = prototype.constructor[Symbol.hasInstance]\r\n\r\n      Object.defineProperty(prototype.constructor, Symbol.hasInstance, {\r\n        configurable: true,\r\n        value(possibleMixin: typeof MixinClass['prototype']) {\r\n          // Retain original instanceof for prototype\r\n          if (prototype.isPrototypeOf(possibleMixin)) return true\r\n\r\n          if (possibleMixin && possibleMixin.constructor) {\r\n            const isInMixins = (mixin: any): boolean => {\r\n              const classes = mixin[MIXIN_CLASSES]\r\n              if (!classes) return false\r\n              for (const cls of classes) {\r\n                if (cls === Class) return true\r\n                const isChildMixin = isInMixins(cls)\r\n                if (isChildMixin) return true\r\n              }\r\n              return false\r\n            }\r\n\r\n            if (this && this !== prototype.constructor) {\r\n              // not used as mixin, `class [this] extends [prototype.constructor] {}`\r\n\r\n              return prototype.constructor.isPrototypeOf(\r\n                possibleMixin.constructor\r\n              )\r\n            }\r\n\r\n            if (isInMixins(possibleMixin.constructor)) return true\r\n\r\n            if (!this) return false\r\n          }\r\n\r\n          return hasInstance(possibleMixin)\r\n        },\r\n      })\r\n\r\n      Object.getOwnPropertyNames(prototype).forEach(name => {\r\n        if (name === 'constructor') return\r\n\r\n        const descriptor = Object.getOwnPropertyDescriptor(prototype, name)!\r\n\r\n        if (descriptor.get) {\r\n          descriptor.get = restoreThisInsideFunction(descriptor.get)\r\n        }\r\n\r\n        if (descriptor.set) {\r\n          descriptor.set = restoreThisInsideFunction(descriptor.set)\r\n        }\r\n\r\n        if (typeof descriptor.value === 'function') {\r\n          descriptor.value = restoreThisInsideFunction(descriptor.value)\r\n        }\r\n\r\n        if (!MixinClass.prototype.hasOwnProperty(name)) {\r\n          Object.defineProperty(MixinClass.prototype, name, descriptor)\r\n        }\r\n      })\r\n\r\n      const parent = Object.getPrototypeOf(prototype)\r\n      if (parent && parent !== Object.prototype) recursePrototype(parent)\r\n    }\r\n\r\n    recursePrototype(Class.prototype)\r\n  })\r\n\r\n  return (MixinClass as any) as Mixin<TMixables>\r\n}\r\n","import { Mixable } from './types'\r\nimport { createMixinClass } from './createMixinClass'\r\n\r\nexport const Mix = <TMixables extends Mixable[]>(...Mixables: TMixables) =>\r\n  createMixinClass(Mixables)\r\n","import { Constructable } from './types'\r\n\r\nexport type IGeneric<TConstructable extends Constructable = any> = {\r\n  Class: TConstructable\r\n}\r\n\r\nexport const Generic = <TConstructable extends Constructable>(\r\n  Class: TConstructable\r\n): IGeneric<TConstructable> => ({\r\n  Class,\r\n})\r\n"],"names":["getMixin","instance","MixinClass","INSTANCE_THIS","get","undefined","Symbol","MIXIN_CLASSES","extend","base","extension","Proxy","_","prop","target","set","value","extractConstructable","Mixable","Class","createMixinClass","Mixables","Classes","map","classesArgs","WeakMap","forEach","i","instanceThis","Object","keys","key","defineProperty","configurable","enumerable","_c","restoreThisInsideFunction","fn","args","apply","recursePrototype","prototype","hasInstance","constructor","possibleMixin","isPrototypeOf","isInMixins","mixin","classes","cls","isChildMixin","getOwnPropertyNames","name","descriptor","getOwnPropertyDescriptor","hasOwnProperty","parent","getPrototypeOf","Mix","Generic"],"mappings":"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"}