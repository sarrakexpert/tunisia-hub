import { Engine, TestMakerReporter } from '..';
import { PluginsManager } from '../engine/plugins-manager';
import { FeatureSpec, ScenarioSpec, StepSpec } from '../specs';
import { SubStepSpec } from '../specs/sub-step-spec';
import { TestMakerReporterOptions } from '../types/reporting/test-maker-reporter-options';
import { RunInfo } from '../types/session-phase-run-info/run-info';
import { AssertionActionInfo } from '../types/reporting/assertion-action-info';
import { ControllerActionInfo } from '../types/reporting/controller-action-info';
import { SelectorActionInfo } from '../types/reporting/selector-action-info';
export declare class ReportersManager {
    reporters: Map<string, {
        reporter: TestMakerReporter;
        options: TestMakerReporterOptions;
    }>;
    private engine;
    private pluginsManager;
    constructor();
    install(engine: Engine, pluginsManager: PluginsManager): Promise<void>;
    init(engine: Engine, pluginsManager: PluginsManager): Promise<void>;
    taskStart(engine: Engine): Promise<void>;
    featureStart(feature: FeatureSpec, info: RunInfo): Promise<void>;
    featureDone(feature: FeatureSpec, info: RunInfo): Promise<void>;
    scenarioStart(scenario: ScenarioSpec, info: RunInfo): Promise<void>;
    scenarioDone(scenario: ScenarioSpec, info: RunInfo): Promise<void>;
    stepStart(step: StepSpec, info: RunInfo): Promise<void>;
    stepDone(step: StepSpec, info: RunInfo): Promise<void>;
    subStepStart(subStep: SubStepSpec, info: RunInfo): Promise<void>;
    subStepDone(subStep: SubStepSpec, info: RunInfo): Promise<void>;
    hookStart(name: string, spec: FeatureSpec | ScenarioSpec | StepSpec | SubStepSpec, info: RunInfo): Promise<void>;
    hookDone(name: string, spec: FeatureSpec | ScenarioSpec | StepSpec | SubStepSpec, info: RunInfo): Promise<void>;
    selectorActionStart(selectorActionInfo: SelectorActionInfo): Promise<void>;
    selectorActionDone(selectorActionInfo: SelectorActionInfo): Promise<void>;
    controllerActionStart(controllerActionInfo: ControllerActionInfo): Promise<void>;
    controllerActionDone(controllerActionInfo: ControllerActionInfo): Promise<void>;
    assertionActionStart(assertionActionInfo: AssertionActionInfo): Promise<void>;
    assertionActionDone(assertionActionInfo: AssertionActionInfo): Promise<void>;
    taskDone(engine: Engine): Promise<void>;
    private registerEvents;
}
