import type { FeatureSpec, ScenarioSpec, StepSpec } from '../../specs';
import type { SubStepSpec } from '../../specs/sub-step-spec';
import { Engine } from '../../types/engine';
import { AssertionActionInfo } from '../../types/reporting/assertion-action-info';
import { ControllerActionInfo } from '../../types/reporting/controller-action-info';
import { SelectorActionInfo } from '../../types/reporting/selector-action-info';
import { TestMakerReporter } from '../../types/reporting/testMakerReporter';
import type { RunInfo } from '../../types/session-phase-run-info/run-info';
export declare class TerminalReporter implements TestMakerReporter {
    name: string;
    private engine;
    private isTextReporter;
    private options;
    private separator;
    private propNameTemplate;
    private valueNameTemplateStart;
    private valueNameTemplateEnd;
    private valueNameTemplateRegex;
    private startTime;
    private runMap;
    private didRun;
    private successCount;
    private failCount;
    private skipCount;
    private undefinedCount;
    private didRunActions;
    private selectorActionsQueue;
    private assertionActionsQueue;
    private fileStream;
    private tableOptions;
    private tableHeaders;
    private tableRows;
    constructor(isTextReporter?: boolean);
    init(engine: Engine, options: {
        [key: string]: any;
    }): Promise<void>;
    taskStart(): Promise<void>;
    taskDone(engine: Engine): Promise<void>;
    private writeFeaturesStats;
    private writeScenariosStats;
    private writeStepsStats;
    private writeActionsStats;
    featureStart(feature: FeatureSpec, info: RunInfo): Promise<void>;
    featureDone(feature: FeatureSpec, info: RunInfo): Promise<void>;
    scenarioStart(scenario: ScenarioSpec, info: RunInfo): Promise<void>;
    scenarioDone(scenario: ScenarioSpec, info: RunInfo): Promise<void>;
    stepStart(step: StepSpec, info: RunInfo): Promise<void>;
    stepDone(step: StepSpec, info: RunInfo): Promise<void>;
    subStepStart(subStep: SubStepSpec, info: RunInfo): Promise<void>;
    subStepDone(subStep: SubStepSpec, info: RunInfo): Promise<void>;
    hookStart(name: string, spec: FeatureSpec | ScenarioSpec | StepSpec | SubStepSpec, info: RunInfo): Promise<void>;
    hookDone(name: string, spec: FeatureSpec | ScenarioSpec | StepSpec | SubStepSpec, info: RunInfo): Promise<void>;
    selectorActionStart(selectorActionInfo: SelectorActionInfo): Promise<void>;
    selectorActionDone(selectorActionInfo: SelectorActionInfo): Promise<void>;
    controllerActionStart(controllerActionInfo: ControllerActionInfo): Promise<void>;
    controllerActionDone(controllerActionInfo: ControllerActionInfo): Promise<void>;
    assertionActionStart(assertionActionInfo: AssertionActionInfo): Promise<void>;
    assertionActionDone(assertionActionInfo: AssertionActionInfo): Promise<void>;
    private calculateScenariosScoreBase;
    private getPercentage;
    private writeSelectorAction;
    private writeControllerAction;
    private writeAssertionAction;
    private writeStepOutput;
    private formatErrors;
    private createTableRows;
    private writeHeader;
    private writeFooter;
    private formatStartEndTime;
    private writeStartEndTime;
    private writeScore;
    private write;
    private newline;
    private indent;
    private canLog;
    private formatDuration;
    private getLongestPropName;
    private createFileStream;
    private sessionIsValid;
    private isBypassed;
}
export declare const terminalReporter: TerminalReporter;
