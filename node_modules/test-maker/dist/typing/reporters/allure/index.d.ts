/// <reference types="node" />
import { Engine, TestMakerReporter } from '../..';
import { InstallList } from '../../test-api/installList';
import { AllureReporterOptions } from '../../types/reporting/allure/allure-reporter-options';
export declare class AllureReporter implements TestMakerReporter {
    name: string;
    private server;
    private port;
    private options;
    private executor;
    private allure;
    private allureRuntime;
    private engine;
    private ansi2Html;
    private categories;
    private includedErrorPhases;
    private includedAttachmentsPhases;
    private featuresCounter;
    private labelName;
    install(): Promise<InstallList>;
    init(engine: Engine, options?: AllureReporterOptions): Promise<void>;
    taskStart(_engine: Engine): Promise<void>;
    taskDone(): Promise<void>;
    addLabel({ name, value }: {
        name: string;
        value: string;
    }): void;
    addStory({ storyName }: {
        storyName: string;
    }): void;
    addFeature({ featureName }: {
        featureName: string;
    }): void;
    addSeverity({ severity }: {
        severity: string;
    }): void;
    addIssue({ issue }: {
        issue: string;
    }): void;
    addTestId({ testId }: {
        testId: string;
    }): void;
    addEnvironment({ name, value }: {
        name: string;
        value: string;
    }): void;
    addDescription({ description, type }: {
        description: string;
        type: string;
    }): void;
    addAttachment({ name, content, type }: {
        name: string;
        content: Buffer | string;
        type: string;
    }): void;
    startStep(title: string): void;
    endStep(status: string): void;
    addStep({ step }: {
        step: any;
    }): void;
    addArgument({ name, value }: {
        name: string;
        value: string;
    }): void;
    private dumpJSON;
    private getLabels;
    private correctAttachments;
    private buildReport;
    private createReport;
    private packFiles;
    private processFeaturesByFeaturesScoreBase;
    private processFeaturesByScenarioScoreBase;
    private processScenariosByFeatureScoreBase;
    private processScenariosByScenarioScoreBase;
    private processSteps;
    private processSubSteps;
    private processBeforeAfterHooks;
    private processHooks;
    private processRuns;
    private formatError;
    private processAttachments;
    private statusTextToAllure;
    private statusTextToStage;
    private processTags;
}
export declare const allureReporter: AllureReporter;
