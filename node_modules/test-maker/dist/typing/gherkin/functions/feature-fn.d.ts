import { FeatureSpec } from "../../specs";
import { AdapterItem } from "../../types/adapter/adapter-item";
import { AdapterUsedClient } from "../../types/adapter/adapter-used-client";
import { ClientInstance } from "../../types/adapter/client-instance";
import { FeatureAstInfo } from "../../types/session-phase-run-info/feature-ast-info";
import { FeatureRunInfo } from "../../types/session-phase-run-info/test-run-info";
import { TestFn } from "../../types/test-api/test-fn";
import { BaseFn, ScenarioFn } from "./";
export interface FeatureFn extends BaseFn<FeatureSpec, FeatureAstInfo> {
}
declare const FeatureFn_base: import("mix-classes/dist/types").Mixin<[import("mix-classes").IGeneric<typeof BaseFn>]>;
export declare class FeatureFn extends FeatureFn_base {
    beforeHook?: TestFn;
    afterHook?: TestFn;
    beforeEachScenarioHook?: TestFn;
    afterEachScenarioHook?: TestFn;
    scenarios: ScenarioFn[];
    constructor(name: string, astInfo: FeatureAstInfo);
    addScenario(scenario: ScenarioFn): void;
    getRunInfo(): FeatureRunInfo;
    runFn({ adapterItem, usedClient, clientInstance }: {
        adapterItem: AdapterItem;
        usedClient: AdapterUsedClient;
        clientInstance: ClientInstance;
    }): Promise<void>;
    preRun(): void;
    private run;
    private runBeforeEachHook;
    private runBeforeHook;
    private runScenarios;
    private runAfterHook;
    private runAfterEachHook;
    private postRun;
    private getSessionId;
    private setupSession;
}
export {};
