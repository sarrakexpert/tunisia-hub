import { FeatureSpec, ScenarioSpec, StepSpec } from "../../specs";
import { AdapterItem } from "../../types/adapter/adapter-item";
import { Client } from "../../types/client/client";
import { FeatureAstInfo } from "../../types/session-phase-run-info/feature-ast-info";
import { PhaseContext } from "../../types/session-phase-run-info/phase-context";
import { ScenarioAstInfo } from "../../types/session-phase-run-info/scenario-ast-info";
import { Session } from "../../types/session-phase-run-info/session";
import { StepAstInfo } from "../../types/session-phase-run-info/step-ast-info";
import { TestPhase } from "./testPhase";
export declare class BaseFn<T extends FeatureSpec | ScenarioSpec | StepSpec, E extends FeatureAstInfo | ScenarioAstInfo | StepAstInfo> {
    id: string;
    name: string;
    astInfo: E;
    lineNumber: number;
    columnNumber: number;
    phase: TestPhase;
    page: string;
    spec: T;
    keyword: string;
    tags: string[];
    skip: boolean;
    only: boolean;
    timeout?: number;
    retries: number;
    disablePageCaching: boolean;
    isOnly: boolean;
    adapters: Map<string, AdapterItem>;
    clients: Map<string, Client>;
    constructor({ name, keyword, spec, astInfo }: {
        name: string;
        keyword: string;
        spec: T;
        astInfo: E;
    });
    protected init(): void;
    protected setupSpec(): void;
    protected setup(): void;
    protected getTimeout(stepType: 'feature' | 'scenario' | 'step'): number;
    protected setupTimeout(_session: Session, phaseContext: PhaseContext): void;
    protected commonRunBeforeHook(session: Session): Promise<Error | undefined>;
    protected commonRunAfterHook(_session: Session): Promise<void>;
    protected clearCacheOrNot(session: Session): Promise<void>;
}
