import { ScenarioSpec } from "../../specs/scenario-spec";
import { PhaseContext } from "../../types/session-phase-run-info/phase-context";
import { ScenarioAstInfo } from "../../types/session-phase-run-info/scenario-ast-info";
import { Session } from "../../types/session-phase-run-info/session";
import { TestFn } from "../../types/test-api/test-fn";
import { ScenarioRunInfo } from "../../types/session-phase-run-info/test-run-info";
import { BaseFn } from "./base-fn";
import { FeatureFn } from "./feature-fn";
import { StepFn } from "./step-fn";
export interface ScenarioFn extends BaseFn<ScenarioSpec, ScenarioAstInfo> {
}
declare const ScenarioFn_base: import("mix-classes/dist/types").Mixin<[import("mix-classes").IGeneric<typeof BaseFn>]>;
export declare class ScenarioFn extends ScenarioFn_base {
    feature: FeatureFn;
    parallel: boolean;
    beforeHook?: TestFn;
    afterHook?: TestFn;
    beforeEachScenarioHook?: TestFn;
    afterEachScenarioHook?: TestFn;
    beforeEachStepHook?: TestFn;
    afterEachStepHook?: TestFn;
    steps: StepFn[];
    constructor({ name, keyword, feature, astInfo }: {
        name: string;
        keyword: string;
        feature: FeatureFn;
        astInfo: ScenarioAstInfo;
    });
    addStep(step: StepFn): void;
    getRunInfo(): ScenarioRunInfo;
    run(session: Session, scenarioPhaseContext: PhaseContext): Promise<void>;
    private runSteps;
    private runBeforeEachScenarioHook;
    private runAfterEachScenarioHook;
    private runBeforeHook;
    private runAfterHook;
}
export {};
