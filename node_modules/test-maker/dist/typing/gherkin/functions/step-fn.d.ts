import { StepSpec } from "../../specs";
import { PhaseContext } from "../../types/session-phase-run-info/phase-context";
import { Session } from '../../types/session-phase-run-info/session';
import { StepAstInfo } from "../../types/session-phase-run-info/step-ast-info";
import { StepRunInfo } from "../../types/session-phase-run-info/test-run-info";
import { TestFn } from "../../types/test-api/test-fn";
import { BaseFn } from "./base-fn";
import { ScenarioFn } from "./scenario-fn";
export interface StepFn extends BaseFn<StepSpec, StepAstInfo> {
}
declare const StepFn_base: import("mix-classes/dist/types").Mixin<[import("mix-classes").IGeneric<typeof BaseFn>]>;
export declare class StepFn extends StepFn_base {
    scenario: ScenarioFn;
    beforeEachStepHook?: TestFn;
    afterEachStepHook?: TestFn;
    private readonly fn;
    constructor({ name, keyword, fn, scenario, astInfo }: {
        name: string;
        keyword: string;
        fn: TestFn;
        scenario: ScenarioFn;
        astInfo: StepAstInfo;
    });
    getRunInfo(): StepRunInfo;
    run(session: Session, stepPhaseContext: PhaseContext): Promise<void>;
    private runBeforeEachStepHook;
    private runAfterEachStepHook;
    private runBeforeHook;
    private runAfterHook;
    private getSpecStates;
}
export {};
