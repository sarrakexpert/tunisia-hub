import { Request, Response } from 'express';
import { JSONServerStoreCollection } from './json-server-store';
interface addRouteParams {
    urlPattern: string;
    method: `get` | `post` | `put` | `patch` | `delete`;
    contentType: string | `text/plain` | `text/html` | `text/javascript` | `text/css` | `application/json` | `image/jpeg` | `image/gif` | `image/png`;
    handler: <T>(request: GenericRequest, response: GenericResponse) => Promise<T>;
}
interface ParsedQs {
    [key: string]: undefined | string | string[] | ParsedQs | ParsedQs[];
}
export declare type Query = ParsedQs;
export declare type GenericRequest = Request<ParamsDictionary, any, any, Query, Record<string, any>>;
export declare type GenericResponse = Response<any, Record<string, any>>;
export interface ParamsDictionary {
    [key: string]: string;
}
export interface WebServerOptions {
    port?: number;
    host?: string;
    ssl?: {
        key: string;
        cert: string;
    };
    dbFileName?: string;
}
declare class WebServer {
    private server;
    private jsonDB;
    private tasks;
    private options;
    start(options: WebServerOptions): Promise<void>;
    close(): Promise<void>;
    addRoute(params: Omit<addRouteParams, `contentType`>): Promise<void>;
    addResultRoute(params: Omit<addRouteParams, `method`>): Promise<void>;
    createCollection(params: JSONServerStoreCollection): Promise<void>;
}
export declare const webServer: WebServer;
export {};
