import { FeatureSpec, ScenarioSpec, StepSpec } from '../../specs';
import { SubStepSpec } from "../../specs/sub-step-spec";
import { InstallList } from "../../test-api/installList";
import { Engine } from "../engine";
import { TestMakerReporterOptions } from "./test-maker-reporter-options";
import { RunInfo } from '../session-phase-run-info/run-info';
import { AssertionActionInfo } from "./assertion-action-info";
import { ControllerActionInfo } from "./controller-action-info";
import { SelectorActionInfo } from "./selector-action-info";
export interface TestMakerReporter {
    name: string;
    install?(engine: Engine, options?: TestMakerReporterOptions): Promise<InstallList>;
    init(engine: Engine, options?: TestMakerReporterOptions): Promise<void>;
    taskStart?(engine: Engine): Promise<void>;
    featureStart?(feature: FeatureSpec, info: RunInfo): Promise<void>;
    featureDone?(feature: FeatureSpec, info: RunInfo): Promise<void>;
    scenarioStart?(scenario: ScenarioSpec, info: RunInfo): Promise<void>;
    scenarioDone?(scenario: ScenarioSpec, info: RunInfo): Promise<void>;
    stepStart?(step: StepSpec, info: RunInfo): Promise<void>;
    stepDone?(step: StepSpec, info: RunInfo): Promise<void>;
    subStepStart?(subStep: SubStepSpec, info: RunInfo): Promise<void>;
    subStepDone?(subStep: SubStepSpec, info: RunInfo): Promise<void>;
    hookStart?(name: string, spec: FeatureSpec | ScenarioSpec | StepSpec | SubStepSpec, info: RunInfo): Promise<void>;
    hookDone?(name: string, spec: FeatureSpec | ScenarioSpec | StepSpec | SubStepSpec, info: RunInfo): Promise<void>;
    selectorActionStart?(selectorActionInfo: SelectorActionInfo): Promise<void>;
    selectorActionDone?(selectorActionInfo: SelectorActionInfo): Promise<void>;
    controllerActionStart?(controllerActionInfoInfo: ControllerActionInfo): Promise<void>;
    controllerActionDone?(controllerActionInfoInfo: ControllerActionInfo): Promise<void>;
    assertionActionStart?(assertionActionInfo: AssertionActionInfo): Promise<void>;
    assertionActionDone?(assertionActionInfo: AssertionActionInfo): Promise<void>;
    taskDone?(engine: Engine): Promise<void>;
}
