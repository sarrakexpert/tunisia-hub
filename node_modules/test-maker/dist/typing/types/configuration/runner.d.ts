import { UsedAdapter } from '../adapter/used-adapter';
import { RetryOptions } from '../retry-options';
import { TestRunInfo } from '../session-phase-run-info/test-run-info';
import { Controller } from '../test-api/controller/controller';
export interface Runner {
    /**
     * @default ``
     */
    nodeVersion?: string;
    /**
     * @default `about:blank`
     */
    startPage: string;
    /**
     * @default false
     */
    liveMode: boolean;
    /**
     * @default false
     */
    headless: boolean;
    /**
     * @default false
     */
    disablePageCaching: boolean;
    /**
     * @default false
     */
    keepClientOpen: boolean;
    /**
     * @default true
     */
    clientPerFeature: boolean;
    /**
     * @default [{name: `playwright`,options: {clients: [`chrome`] }}]
     */
    adapters: UsedAdapter[];
    backoff: {
        /**
         * @default 0
         */
        adapter: number | (() => Promise<number> | number);
        /**
         * @default 0
         */
        client: number | (() => Promise<number> | number);
        /**
         * @default 0
         */
        feature: number | (() => Promise<number> | number);
    };
    parallel: {
        /**
         * @default 1
         */
        adapters: number;
        /**
         * @default 1
         */
        clients: number;
        /**
         * @default 1
         */
        features: number;
    };
    throttling: {
        /**
         * @default 0
         */
        controllerAction: number;
        /**
         * @default 0
         */
        selectorActions: number;
        /**
         * @default 0
         */
        assertionActions: number;
    };
    proxy: {
        /**
         * @default ``
         */
        server: string;
        /**
         * @default ``
         */
        username: string;
        /**
         * @default ``
         */
        password: string;
        /**
         * @default []
         */
        bypass: string[];
    };
    isAppBusyEvaluator: {
        /**
         * @default undefined
         */
        condition: (I: Controller, testRunInfo: TestRunInfo) => Promise<boolean>;
        retry?: RetryOptions;
        runBefore: {
            /**
             * @default true
             */
            controllerActions: boolean;
            /**
             * @default true
             */
            selectorActions: boolean;
            /**
             * @default true
             */
            assertionActions: boolean;
        };
    };
    timeout: {
        /**
         * @default 120000
         */
        feature: number;
        /**
         * @default 0
         */
        scenario: number;
        /**
         * @default 0
         */
        step: number;
        /**
         * @default 10000
         */
        selector: number;
        /**
         * @default 12000
         */
        assertion: number;
        /**
         * @default 10000
         */
        pageLoad: number;
    };
    failure: {
        feature: {
            /**
             * @default false
             */
            exitProcessOnFirstFail: boolean;
            /**
             * @default true
             */
            skipRemainingScenariosOnScenarioFail: boolean | ((testRunInfo: TestRunInfo) => Promise<boolean>);
            /**
             * @default true
             */
            skipRemainingStepsOnStepFail: boolean | ((testRunInfo: TestRunInfo) => Promise<boolean>);
        };
    };
    process: {
        /**
         * @default `Test Process Succeeded`
         */
        successExitMessage: string;
        /**
         * @default 0
         */
        successThreshhold: number;
        /**
         * @default 0
         */
        failureExitCode: number;
        /**
         * @default `Test Process Failed`
         */
        failureExitMessage: string;
        /**
         * @default false
         */
        exitOnUnhandledErrors: boolean;
    };
}
