declare type NonAny = number | boolean | string | symbol | null;
export declare type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends NonAny[] ? T[P] : T[P] extends ReadonlyArray<NonAny> ? T[P] : T[P] extends (infer U)[] ? DeepPartial<U>[] : T[P] extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T[P] extends Set<infer V> ? Set<DeepPartial<V>> : T[P] extends Map<infer K, infer V> ? Map<K, DeepPartial<V>> : T[P] extends NonAny ? T[P] : DeepPartial<T[P]>;
};
export {};
