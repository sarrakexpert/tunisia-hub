import { ElementHandle } from "playwright-core/types/types";
export declare type ClientFunctionArgs<Arg> = Arg extends ElementHandle<infer T> ? T : Arg extends [infer A0] ? [ClientFunctionArgs<A0>] : Arg extends [infer A0, infer A1] ? [ClientFunctionArgs<A0>, ClientFunctionArgs<A1>] : Arg extends [infer A0, infer A1, infer A2] ? [ClientFunctionArgs<A0>, ClientFunctionArgs<A1>, ClientFunctionArgs<A2>] : Arg extends [infer A0, infer A1, infer A2, infer A3] ? [ClientFunctionArgs<A0>, ClientFunctionArgs<A1>, ClientFunctionArgs<A2>, ClientFunctionArgs<A3>] : Arg extends Array<infer T> ? Array<ClientFunctionArgs<T>> : Arg extends object ? {
    [Key in keyof Arg]: ClientFunctionArgs<Arg[Key]>;
} : Arg;
