interface AssertionChainPromise extends Matchers, PromiseLike<Matchers> {
    and: AssertionChainPromise;
    or: AssertionChainPromise;
}
export interface Matchers {
    toBeOk(): AssertionChainPromise;
    toExist(): AssertionChainPromise;
    toEqual(expected: any): AssertionChainPromise;
    toBeSameAs(expected: any): AssertionChainPromise;
    toBeSameJSONAs(expected: any): AssertionChainPromise;
    toBeAtLeast(expected: number | [] | {}): AssertionChainPromise;
    toBeAtMost(expected: number | [] | {}): AssertionChainPromise;
    toBeGreaterThan(expected: number | [] | {}): AssertionChainPromise;
    toBeLessThan(expected: number | [] | {}): AssertionChainPromise;
    toBeBetween(expectedLower: number | [] | {}, expectedUpper: number | [] | {}): AssertionChainPromise;
    toContainAllOf(expected: any[]): AssertionChainPromise;
    toContainAnyOf(expected: any[]): AssertionChainPromise;
    toContain(expected: string | any[]): AssertionChainPromise;
    toStartWith(expected: string): AssertionChainPromise;
    toEndWith(expected: string): AssertionChainPromise;
    toMatch(expected: RegExp): AssertionChainPromise;
    toBeInstanceOf(expected: any): AssertionChainPromise;
    toBeOfType(expected: string): AssertionChainPromise;
    toBeBoolean(): AssertionChainPromise;
    toBeTrue(): AssertionChainPromise;
    toBeFalse(): AssertionChainPromise;
    toBeFalsy(): AssertionChainPromise;
    toBeUndefined(): AssertionChainPromise;
    toBeNull(): AssertionChainPromise;
    toBeNan(): AssertionChainPromise;
    toThrow(expected?: string | RegExp | ((ex: Error) => boolean)): AssertionChainPromise;
    not: Matchers;
}
export {};
