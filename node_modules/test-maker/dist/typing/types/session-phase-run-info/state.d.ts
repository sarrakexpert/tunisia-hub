import { AdapterProxy } from "../../adapters/adapter-proxy";
import { DashBoard } from "../../dashboard/dashboard";
import { Debugger } from "../../debugger";
import { FeatureFn } from "../../gherkin/functions";
import { LazyPromise } from "../../helpers/lazy-promise";
import { FeatureSpec } from "../../specs";
import { InstallList } from '../../test-api/installList';
import { BeforeAfterHook } from "../before-after-hook";
import { Source } from "../configuration/source";
import { FeatureAstInfo } from "./feature-ast-info";
import { FeatureToRunInfo } from "./feature-to-run-info";
import { Session } from './session';
import { TestStatus } from "./test-status";
export interface State {
    debugger: Debugger;
    cliArgs: {
        [key: string]: any;
    };
    source: Source[];
    filesCache: Map<string, string>;
    filesToDelete: string[];
    specs: Map<string, FeatureSpec>;
    dashboard: DashBoard;
    terminalDashBoard: boolean;
    adapterProxy: AdapterProxy;
    installQueue: InstallList[];
    sessions: Map<string, Session>;
    onlyFeatures: Map<string, string>;
    onlyScenarios: Set<string>;
    onlySteps: Set<string>;
    beforeAllResult?: BeforeAfterHook;
    afterAllResult?: BeforeAfterHook;
    clientSocket: {
        port: number;
        socket: any;
    };
    clientScripts: {
        [key: string]: string;
    };
    runner: {
        runId: string;
        runs: number;
        status: TestStatus;
        pending: boolean;
        ChangeTask: LazyPromise<any> | undefined;
        changedFeatures: Set<string>;
        loadedFeatures: Map<string, FeatureFn>;
        featuresAst: Map<string, FeatureAstInfo>;
        featuresToRun: Map<string, FeatureToRunInfo>;
        clientFeatures: Map<string, {
            adapter: string;
            features: string[];
        }>;
        successPercentage: number;
    };
}
