import { Browser, BrowserContext, ElementHandle } from "playwright-core";
import { Engine } from "../..";
import type { SelectorOptions } from "../../types/test-api/selector/selector-options";
import { Controller } from "./controller";
export declare class PlayWrightSelector {
    init: String | PlayWrightSelector;
    uid: string;
    isResolved: boolean;
    elementsHandles: ElementHandle<SVGElement | HTMLElement>[];
    private engine;
    private browser;
    private context;
    private controller;
    private activeFrame;
    private options;
    constructor({ engine, browser, context, controller, init, options }: {
        engine: Engine;
        browser: Browser;
        context: BrowserContext;
        controller: Controller;
        init: string | PlayWrightSelector;
        options?: SelectorOptions;
    });
    resolveHandle({ state, force }: {
        state?: "attached" | "detached" | "hidden" | "visible";
        force?: boolean;
    }): Promise<PlayWrightSelector>;
    get id(): Promise<string | null>;
    get tagName(): Promise<string>;
    get nodeType(): Promise<number>;
    get namespaceURI(): Promise<string | null>;
    get className(): Promise<string>;
    get classNames(): Promise<string[]>;
    get focused(): Promise<boolean>;
    get visible(): Promise<boolean>;
    get inViewport(): Promise<boolean>;
    get inViewportPartially(): Promise<boolean>;
    get stable(): Promise<boolean>;
    get clickable(): Promise<boolean>;
    get editable(): Promise<boolean>;
    get enabled(): Promise<boolean>;
    get disabled(): Promise<boolean>;
    get exists(): Promise<boolean>;
    get attached(): Promise<boolean>;
    get checked(): Promise<boolean>;
    get selected(): Promise<boolean>;
    get selectedIndex(): Promise<number | undefined>;
    get value(): Promise<string | undefined>;
    get nodeValue(): Promise<string | undefined>;
    get textContent(): Promise<string | undefined>;
    get innerText(): Promise<string | undefined>;
    get innerHTML(): Promise<string | undefined>;
    get outerHTML(): Promise<string | undefined>;
    get style(): Promise<{
        [key: string]: any;
    } | undefined>;
    get count(): Promise<number>;
    get childElementCount(): Promise<number | undefined>;
    get childNodeCount(): Promise<number>;
    get hasChildElements(): Promise<boolean>;
    get hasChildNodes(): Promise<boolean>;
    get attributes(): Promise<{
        [key: string]: any;
    }>;
    get clientHeight(): Promise<number>;
    get clientLeft(): Promise<number>;
    get clientTop(): Promise<number>;
    get clientWidth(): Promise<number>;
    get offsetHeight(): Promise<number>;
    get offsetLeft(): Promise<number>;
    get offsetTop(): Promise<number>;
    get offsetWidth(): Promise<number>;
    get scrollHeight(): Promise<number>;
    get scrollLeft(): Promise<number>;
    get scrollTop(): Promise<number>;
    get scrollWidth(): Promise<number>;
    get boundingClientRect(): Promise<DOMRect>;
    hasClass(className: string): Promise<boolean>;
    hasAttribute(attribute: string): Promise<boolean>;
    getAttribute(attribute: string): Promise<string | null>;
    getStyleProperty(styleProperty: string): Promise<string | null>;
    getBoundingClientRectProperty(propertyName: string): Promise<number | null>;
    nth(index: number): Promise<PlayWrightSelector>;
    withText(text: string | RegExp): Promise<PlayWrightSelector>;
    withExactText(text: string): Promise<PlayWrightSelector>;
    withAttribute(attributeName: string | RegExp, attributeValue: string | RegExp): Promise<PlayWrightSelector>;
    filterVisible(): Promise<PlayWrightSelector>;
    filterHidden(): Promise<PlayWrightSelector>;
    find(predicate: string | Function, dependencies?: {
        [key: string]: any;
    }): Promise<PlayWrightSelector>;
    filter(predicate: string | Function, dependencies?: {
        [key: string]: any;
    }): Promise<PlayWrightSelector>;
    parent(predicate: string | Function, dependencies?: {
        [key: string]: any;
    }): Promise<this>;
    sibling(predicate: string | Function, dependencies?: {
        [key: string]: any;
    }): Promise<this>;
    prevSibling(predicate: string | Function, dependencies?: {
        [key: string]: any;
    }): Promise<this>;
    nextSibling(predicate: string | Function, dependencies?: {
        [key: string]: any;
    }): Promise<this>;
    child(predicate: string | Function, dependencies?: {
        [key: string]: any;
    }): Promise<this>;
    with(options: SelectorOptions): Promise<PlayWrightSelector>;
    private checkElementIsVisible;
    private getProperty;
    private getSiblings;
    private getRelatedElements;
    private filterElements;
}
