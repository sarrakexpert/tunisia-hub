import { FeatureFn } from '../gherkin/functions';
import { ActiveAdapter } from '../types/adapter/active-adapter';
import { AdapterItem } from '../types/adapter/adapter-item';
import { Engine } from '../types/engine';
import { Session } from '../types/session-phase-run-info/session';
export declare class AdapterProxy {
    activeAdapters: Map<string, ActiveAdapter>;
    defaultAdapter: AdapterItem | undefined;
    isRunning: boolean;
    isRestarted: boolean;
    private engine;
    private currentRun;
    private watchingPaused;
    private fileWatcher;
    private adaptersQueue;
    private parallelFeaturesWarningSet;
    install(): Promise<void>;
    start(engine: Engine): Promise<void>;
    restart(isRestart?: boolean): Promise<void>;
    stop({ exit, fromObserver }: {
        exit?: boolean;
        fromObserver: boolean;
    }): Promise<void>;
    exit(): Promise<void>;
    runFeatures(): Promise<void>;
    addFeatureToRun(featureFn: FeatureFn): void;
    updateClientStatus(session: Session): Promise<void>;
    private init;
    private initAdapters;
    private createAdaptersQueue;
    private createClientsQueue;
    private createFeaturesQueue;
    private initKeyboardObserver;
    private initWatcher;
    toggleWatching(): void;
    addFileToWatcher(filename: string): void;
    fileChanged(file: string): Promise<void>;
    private loadFile;
    private replaceRequire;
    private restoreRequire;
    private normalizeClients;
    private getClient;
    private getExistingInstance;
    private disposeClient;
    private createClientInstance;
    private validateClient;
    private cleanUpClients;
    private cleanUpFeature;
    private canAddFeatureToAdapter;
    private canAddFeatureToClient;
}
export declare const adapterProxy: AdapterProxy;
