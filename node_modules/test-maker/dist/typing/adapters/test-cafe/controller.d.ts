import { ClientInfo, FillActionOptions } from '../..';
import { AdapterController } from '../../types/adapter/adapter-controller';
import { Session } from '../../types/session-phase-run-info/session';
import { ClientFunctionArgs } from '../../types/test-api/client-function/client-function-args';
import { ClientLogs } from '../../types/test-api/controller/client-logs';
import { Cookie } from '../../types/test-api/controller/cookie';
import { DragToSelectorOptions } from '../../types/test-api/controller/drag-to-selector-options';
import { HandleDialogOptions } from '../../types/test-api/controller/handle-dialog-options';
import { KeyModifiers } from '../../types/test-api/controller/key-modifiers';
export declare class Controller implements AdapterController {
    session: Session;
    private readonly t;
    private lastClipboard;
    constructor(t: TestController);
    focus(selector: any): Promise<void>;
    blur(selector: any): Promise<void>;
    fillField(selector: any, text: string, options?: FillActionOptions): Promise<void>;
    appendField(selector: any, text: string, options?: FillActionOptions): Promise<void>;
    prependField(selector: any, text: string, options?: FillActionOptions): Promise<void>;
    clearField(selector: any): Promise<void>;
    select(selector: any): Promise<void>;
    selectOption(selector: any, option: string | number | {
        label?: string;
        value?: string;
        index?: number;
    } | string[] | number[] | {
        label?: string;
        value?: string;
        index?: number;
    }[]): Promise<{
        index: number;
        label: string;
        value: any;
    }[]>;
    deselectOption(selector: any, option: string | number | {
        label?: string;
        value?: string;
        index?: number;
    } | string[] | number[] | {
        label?: string;
        value?: string;
        index?: number;
    }[]): Promise<{
        index: number;
        label: string;
        value: any;
    }[]>;
    checkOption(selector: any): Promise<void>;
    uncheckOption(selector: any): Promise<void>;
    pressKey(keys: string): Promise<void>;
    pressUpKey(key: string): Promise<void>;
    pressDownKey(key: string): Promise<void>;
    pressEnterKey(): Promise<void>;
    pressTabKey(): Promise<void>;
    pressArrowUpKey(): Promise<void>;
    pressArrowDownKey(): Promise<void>;
    pressArrowLeftKey(): Promise<void>;
    pressArrowRightKey(): Promise<void>;
    click(selector: any, options?: {
        modifiers?: KeyModifiers;
    }): Promise<void>;
    doubleClick(selector: any, options?: {
        modifiers?: KeyModifiers;
    }): Promise<void>;
    middleClick(selector: any, options?: {
        modifiers?: KeyModifiers;
    }): Promise<void>;
    rightClick(selector: any, options?: {
        modifiers?: KeyModifiers;
    }): Promise<void>;
    hover(selector: any, options?: {
        modifiers?: KeyModifiers;
    }): Promise<void>;
    mouseUp(options?: {
        button: `left` | `middle` | `right`;
        modifiers?: KeyModifiers;
    }): Promise<void>;
    mouseDown(options?: {
        button: `left` | `middle` | `right`;
        modifiers?: KeyModifiers;
    }): Promise<void>;
    mouseMove(x: number, y: number, options?: {
        modifiers?: KeyModifiers;
    }): Promise<void>;
    drag(selector: any, dragOffsetX: number, dragOffsetY: number, options?: DragToSelectorOptions): Promise<void>;
    dragToSelector(selector: any, destinationSelector: any, options?: {
        destinationOffsetX?: number;
        destinationOffsetY?: number;
        modifiers?: KeyModifiers;
    }): Promise<void>;
    moveCursorToSelector(selector: any, offsetX: number, offsetY: number): Promise<void>;
    selectText(selector: any, startPos?: number, endPos?: number): Promise<void>;
    selectEditableContent(startSelector: any, endSelector: any): Promise<void>;
    selectTextAreaContent({ selector, startLine, startPosition, endLine, endPosition }: {
        selector: any;
        startLine?: number;
        startPosition?: number;
        endLine?: number;
        endPosition?: number;
    }): Promise<void>;
    upload(selector: any): Promise<void>;
    setFilesToUpload(selector: any, filePath: string | string[]): Promise<void>;
    clearUpload(selector: any): Promise<void>;
    scrollToTop(): Promise<void>;
    scrollToBottom(): Promise<void>;
    scrollToSelector(selector: any, offsetX: number, offsetY: number): Promise<void>;
    scrollTo(offsetX: number, offsetY: number): Promise<void>;
    goto(url: string): Promise<void>;
    refresh(): Promise<void>;
    go(delta: number): Promise<void>;
    goForward(): Promise<void>;
    goBackward(): Promise<void>;
    maximizeWindow(): Promise<void>;
    resizeWindow(width: number, height: number): Promise<void>;
    resizeWindowToFitDevice(deviceName: string, options?: {
        portraitOrientation?: boolean;
    }): Promise<void>;
    switchToFrame(selector: any): Promise<void>;
    switchToMainFrame(): Promise<void>;
    switchToWindow(window: {
        id: string;
    }): Promise<void>;
    switchToParentWindow(): Promise<void>;
    switchToPreviousWindow(): Promise<void>;
    openWindow(url: string): Promise<{
        id: string;
    }>;
    closeWindow(window: {
        id: string;
    }): Promise<void>;
    getCurrentWindow(): Promise<{
        id: string;
    }>;
    nativeDialogHandled(): Promise<void>;
    handleNativeDialog(fn: ((type: 'alert' | 'confirm' | 'beforeunload' | 'prompt', text: string, url?: string) => any) | null, options?: HandleDialogOptions): Promise<void>;
    setCookie(cookie: {
        name: string;
        value: string;
        domain?: string;
        path?: string;
        expires: number;
        secure?: boolean;
        sameSite?: `lax` | `strict` | `none`;
    }): Promise<void>;
    getCookie(cookieName: string): Promise<Cookie | null>;
    clearCookie(cookieName: string): Promise<void>;
    deleteCookie(cookieName: string): Promise<void>;
    setLocalStorage(name: string, value: string): Promise<void>;
    getLocalStorage(name: string): Promise<string | null>;
    removeLocalStorage(name: string): Promise<void>;
    setSessionStorage(name: string, value: string): Promise<void>;
    getSessionStorage(name: string): Promise<string | null>;
    removeSessionStorage(name: string): Promise<void>;
    eval<Arg, R>(fn: (arg: ClientFunctionArgs<Arg>) => R | Promise<R>, arg?: ClientFunctionArgs<Arg>): Promise<any>;
    getFrames(onlyMainFrame?: boolean): Promise<any[] | boolean>;
    getClientInfo(): Promise<ClientInfo>;
    wait(timeout: number): Promise<void>;
    debug(): Promise<void>;
    getClientLogs(): Promise<ClientLogs>;
    takeScreenshot(path: string, options?: {
        fullPage: boolean;
    }): Promise<void>;
    takeSelectorScreenshot(selector: any, path: string): Promise<void>;
    getScrollPosition(): Promise<{
        left: number;
        top: number;
    }>;
    getTitle(): Promise<string>;
    getCurrentUrl(): Promise<string>;
    getSource(): Promise<string>;
    cut(params?: {
        value?: string;
        selector?: any;
        format?: 'text/plain' | 'text/html' | 'default';
        store?: {
            value: string;
        };
    }): Promise<void>;
    copy(params?: {
        value?: string;
        selector?: any;
        format?: 'text/plain' | 'text/html' | 'default';
        store?: {
            value: string;
        };
    }): Promise<void>;
    paste(to: any, store?: {
        value: string;
    }): Promise<void>;
    getSpecStates({ feature, scenario, step, subStep }: {
        feature: {
            name: string;
        };
        scenario: {
            name: string;
            keyword: string;
        };
        step: {
            name: string;
            keyword: string;
        };
        subStep?: {
            name: string;
        };
    }): Promise<void>;
    private correctModifiers;
}
