import { Browser } from 'webdriverio';
import { Engine, PlaywrightAdapterOptions, TestMakerAdapterOptions } from '../..';
import { InstallList } from '../../test-api/installList';
import { AdapterApi } from '../../types/adapter/adapter-api';
import { AppiumAdapterOptions } from '../../types/adapter/appium/appium-adapter-options';
import { RunnerParameters } from '../../types/adapter/runner-parameters';
import { AdapterType } from '../../types/adapter/testMakerAdapter';
import { WebDriverOptions } from '../../types/adapter/webdriver/web-driver-options';
import { Controller } from './controller';
declare type Service = `appium` | `selenium` | `saucelabs` | `browserstack` | `lambda`;
export interface ActiveDriverContext {
    runnerId: string;
    driver: Browser<any>;
    controllers: Controller[];
    activePage?: string;
}
export declare class WebDriverAdapter {
    name: string;
    type: AdapterType;
    service: Service;
    protected engine: Engine;
    protected activeContexts: Map<string, ActiveDriverContext>;
    private baseOptions;
    baseInstall({ engine, options, installs }: {
        engine: Engine;
        options?: TestMakerAdapterOptions;
        installs: InstallList;
    }): Promise<InstallList>;
    init(engine: Engine, _options?: PlaywrightAdapterOptions): Promise<void>;
    start(_engine: Engine, _options?: AppiumAdapterOptions): Promise<void>;
    stop(): Promise<void>;
    baseClientStart({ webDriverOptions, service, params, clientType }: {
        webDriverOptions: Partial<WebDriverOptions>;
        service: Service;
        params: RunnerParameters;
        clientType: `mobile` | `web` | `desktop` | `unit`;
    }): Promise<AdapterApi>;
    baseClientRestart(params: RunnerParameters): Promise<void>;
    baseClientStop(params: RunnerParameters): Promise<void>;
    protected getApi({ activeContext, service, clientName, params, clientType }: {
        activeContext: ActiveDriverContext;
        service: Service;
        clientName: string;
        params: RunnerParameters;
        clientType: `mobile` | `web` | `desktop` | `unit`;
    }): Promise<AdapterApi>;
    private cleanUp;
}
export {};
