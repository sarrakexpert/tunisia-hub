import { Engine, TestMakerPlugin } from "../../../index";
import { InstallList } from "../../../test-api/installList";
import { DeepPartial } from "../../../types/deep-partial";
import { TestMakerPluginOptions } from "../../../types/plugins/plugin-option";
export declare type Locale = `en-US` | `en` | `en-AU` | `en-GB` | `en-IE` | `en-SG` | `en-ZA` | `en-IN` | `ar-XB` | `ar` | `bg` | `bs` | `ca` | `cs` | `da` | `de` | `el` | `en-XA` | `es` | `fi` | `fil` | `fr` | `he` | `hi` | `hr` | `hu` | `gsw` | `id` | `in` | `it` | `iw` | `ja` | `ko` | `ln` | `lt` | `lv` | `mo` | `nl` | `nb` | `no` | `pl` | `pt` | `pt-PT` | `ro` | `ru` | `sk` | `sl` | `sr` | `sr-Latn` | `sv` | `ta` | `te` | `th` | `tl` | `tr` | `uk` | `vi` | `zh` | `zh-HK` | `zh-TW`;
interface ThrottlingSettings {
    rttMs?: number;
    throughputKbps?: number;
    requestLatencyMs?: number;
    downloadThroughputKbps?: number;
    uploadThroughputKbps?: number;
    cpuSlowdownMultiplier?: number;
}
interface SharedFlagsSettings {
    logLevel?: 'silent' | 'error' | 'info' | 'verbose';
    locale?: Locale;
    maxWaitForLoad?: number;
    blockedUrlPatterns?: string[] | null;
    additionalTraceCategories?: string | null;
    auditMode?: boolean | string;
    gatherMode?: boolean | string;
    disableStorageReset?: boolean;
    disableDeviceEmulation?: boolean;
    emulatedFormFactor?: 'mobile' | 'desktop' | 'none';
    throttlingMethod?: 'devtools' | 'simulate' | 'provided';
    throttling?: ThrottlingSettings;
    onlyAudits?: string[] | null;
    onlyCategories?: string[] | null;
    skipAudits?: string[] | null;
    extraHeaders?: any | null;
}
interface Thresholds extends Record<string, any> {
    performance: number;
    accessibility: number;
    'best-practices': number;
    seo: number;
    pwa: number;
}
interface AuthData {
    url?: string;
    user: {
        selector: string;
        value: string;
    };
    password: {
        selector: string;
        value: string;
    };
    submit: {
        selector: string;
        value: string;
    };
}
export interface LightHousePluginOptions extends TestMakerPluginOptions, SharedFlagsSettings {
    thresholds: Thresholds;
    auth?: AuthData;
    reporting: {
        formats: {
            csv: boolean;
            html: boolean;
            json: boolean;
        };
        name: string;
        directory: string;
    };
}
export declare type PartialConfiguration = DeepPartial<LightHousePluginOptions>;
export declare class LightHousePlugin implements TestMakerPlugin {
    name: string;
    version: string;
    description: string;
    options: LightHousePluginOptions;
    install(): Promise<InstallList>;
    init(engine: Engine, options?: PartialConfiguration): Promise<void>;
    audit(url: string, options?: PartialConfiguration): Promise<{
        results: string[];
        errors: string[];
    }>;
    private evaluateResult;
    private generateReport;
    private login;
}
export declare const lightHousePlugin: LightHousePlugin;
export {};
