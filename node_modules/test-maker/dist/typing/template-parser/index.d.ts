interface Pipe {
    fn: (info: {
        value: any;
        pipe: Pipe;
    }, ...args: any[]) => any;
    isPrefix?: boolean;
    suffix?: string;
}
export declare class TemplateParser {
    pipes: {
        $execute: (model: any, name: string, a: any, b: any, c: any, d: any, e: any, f: any, g: any, h: any) => any;
    } & Record<string, any>;
    constructor();
    render(template: string, model: Record<string, any>, repository?: Record<string, any>): any;
    compile(template: string): any;
    register(name: string, registrationInfo: {
        fn: (info: {
            value: any;
            pipe: Pipe;
        }, ...args: any[]) => any;
        isPrefix?: boolean;
    }): this;
    private buildPipes;
}
export declare const templateParser: TemplateParser;
export {};
