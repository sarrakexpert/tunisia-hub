import { SelectorProxy } from "./selector-proxy";
export declare class LazySelector extends Promise<any> {
    private readonly _executor;
    private _promise;
    reExecutable: SelectorProxy;
    reExecutableFn: (selectorProxy: SelectorProxy, clonedSelector: SelectorProxy) => Promise<any>;
    constructor(executor: (resolve: (value: any | PromiseLike<any>) => void, reject: (reason?: any) => void) => void);
    then<TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): PromiseLike<TResult1 | TResult2>;
    catch(onRejected: any): any;
}
