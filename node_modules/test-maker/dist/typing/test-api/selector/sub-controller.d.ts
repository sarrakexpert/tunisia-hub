import { ActionabilityCheckTypes } from "../../types/test-api/actionability-check-types";
import { AssertOptions } from "../../types/test-api/assertion/assert-options";
import { SelectorMatchers } from "../../types/test-api/assertion/selector-matchers";
import { DragToSelectorOptions } from "../../types/test-api/controller/drag-to-selector-options";
import { FillActionOptions } from "../../types/test-api/controller/fill-action-options";
import { KeyModifiers } from "../../types/test-api/controller/key-modifiers";
import { SelectorControllerActions } from "../../types/test-api/selector/selector-api";
import { SelectorProxy } from "./selector-proxy";
export declare class SubController implements SelectorControllerActions<SubController> {
    private readonly selectorProxy;
    private controllerProxy;
    constructor(selectorProxy: SelectorProxy);
    expect(options?: AssertOptions): SelectorMatchers;
    fillField(text: string | number, options?: FillActionOptions): SubController;
    appendField(text: string | number, options?: FillActionOptions): SubController;
    clearField(): SubController;
    select(): SubController;
    selectOption(option: string | number | string[] | number[]): SubController;
    deselectOption(option: string | number | string[] | number[]): SubController;
    checkOption(): SubController;
    uncheckOption(): SubController;
    focus(): SubController;
    blur(): SubController;
    click(options?: {
        modifiers?: KeyModifiers;
    }): SubController;
    doubleClick(options?: {
        modifiers?: KeyModifiers;
    }): SubController;
    middleClick(options?: {
        modifiers?: KeyModifiers;
    }): SubController;
    rightClick(options?: {
        modifiers?: KeyModifiers;
    }): SubController;
    hover(options?: {
        modifiers?: KeyModifiers;
    }): SubController;
    drag(dragOffsetX: number, dragOffsetY: number, options?: DragToSelectorOptions): SubController;
    dragToSelector(destinationSelector: any, options?: {
        destinationOffsetX?: number;
        destinationOffsetY?: number;
        modifiers?: KeyModifiers;
    }): SubController;
    moveCursorToSelector(offsetX: number, offsetY: number): SubController;
    selectText(startPos?: number, endPos?: number): SubController;
    selectEditableContent(endSelector: any): SubController;
    selectTextAreaContent({ startLine, startPosition, endLine, endPosition }: {
        startLine?: number;
        startPosition?: number;
        endLine?: number;
        endPosition?: number;
    }): SubController;
    upload(filePath?: string | string[]): SubController;
    setFilesToUpload(filePath: string | string[]): SubController;
    clearUpload(): SubController;
    waitForToExist(): SubController;
    waitForToNotExist(): SubController;
    waitForToBeVisible(): SubController;
    waitForToBeInvisible(): SubController;
    waitForActionabilityCheck(checks: ActionabilityCheckTypes[]): SubController;
    waitForFrameToLoad(): SubController;
    then<TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): PromiseLike<TResult1 | TResult2>;
    private executeActions;
}
