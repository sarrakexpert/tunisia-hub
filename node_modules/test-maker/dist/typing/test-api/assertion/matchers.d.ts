import "reflect-metadata";
declare class AssertionMatchers {
    toBeOk(actual: any): boolean;
    toExist(actual: any): boolean;
    toEqual(actual: any, expected: any): boolean;
    toBeSameAs(actual: any, expected: any): boolean;
    toBeSameJSONAs(actual: any, expected: any): boolean;
    toBeAtLeast(actual: any, expected: number | [] | {}): boolean;
    toBeAtMost(actual: any, expected: number | [] | {}): boolean;
    toBeGreaterThan(actual: any, expected: number | [] | {}): boolean;
    toBeLessThan(actual: any, expected: number | [] | {}): boolean;
    toBeBetween(actual: any, expectedLower: number | [] | {}, expectedUpper: number | [] | {}): boolean;
    toContainAllOf(actual: any, expected: any[]): boolean;
    toContainAnyOf(actual: any, expected: any[]): boolean;
    toContain(actual: string | string[], expected: string): boolean;
    toStartWith(actual: string, expected: string): boolean;
    toEndWith(actual: string, expected: string): boolean;
    toMatch(actual: string, expected: RegExp): boolean;
    toBeInstanceOf(actual: any, expected: any): boolean;
    toBeOfType(actual: any, expected: string): boolean;
    toBeBoolean(actual: any): boolean;
    toBeTrue(actual: any): boolean;
    toBeFalse(actual: any): boolean;
    toBeFalsy(actual: any): boolean;
    toBeUndefined(actual: any): boolean;
    toBeNull(actual: any): boolean;
    toBeNan(actual: any): boolean;
    toThrow(actual: any, expected?: string | RegExp | ((ex: Error) => boolean)): boolean;
}
export declare const assertionMatchers: AssertionMatchers;
export {};
