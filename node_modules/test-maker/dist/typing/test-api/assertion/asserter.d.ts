import 'reflect-metadata';
import type { AssertOptions } from '../../types/test-api/assertion/assert-options';
import { ControllerProxy } from '../controller/controller-proxy';
export declare class Assert {
    private controller;
    private isSelector;
    private isExpectSelector;
    private isReExecutable;
    private actual;
    private resolvedActual;
    private selector;
    private selectorActions;
    private options;
    private passedOptions;
    private actions;
    private retryCount;
    private usingSelectorOptions;
    private canLog;
    private readonly assertionMatchers;
    private lastActionChainType;
    private andMap;
    private orMap;
    private templateParser;
    constructor(assertionMatchers: any);
    that({ actual, options, controller, isSelector, isExpectSelector }: {
        actual: any;
        options?: AssertOptions;
        controller: ControllerProxy;
        isSelector?: boolean;
        isExpectSelector?: boolean;
    }): any;
    then<TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): PromiseLike<TResult1 | TResult2>;
    private buildMatchers;
    private getMatchersKeys;
    private prepareMatcherFn;
    private formatMessage;
    private createMatcherFn;
    private validateAssertSelectorTimeout;
    private logMatcher;
    private sessionIsValid;
    private resolveActual;
    private executeActions;
}
