"use strict";
// Copyright 2018 Knowledge Expert SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wait = exports.Condition = exports.Command = exports.Query = void 0;
const conditionDoesNotMatchError_1 = require("./errors/conditionDoesNotMatchError");
const timeoutError_1 = require("./errors/timeoutError");
const utils_1 = require("./utils");
/**
 * We use queries to perform an async query on entity of type T, i.e. get something from entity.
 * So a query can pass and return something of type R or failed with Error correspondingly.
 */
class Query {
    constructor(description, fn) {
        this.description = description;
        this.fn = fn;
    }
    async call(entity) {
        return this.fn(entity);
    }
    toString() {
        return this.description;
    }
}
exports.Query = Query;
/**
 * Commands we use in a normal "command" case, i.e. to perform the async command on entity of type T.
 * Command can pass or fail with Error correspondingly.
 */
class Command extends Query {
}
exports.Command = Command;
// todo: updated tsdocs
/**
 * Like Command<T>, i.e. can pass or fail with Error.
 * It is defined as separate type alias to differentiate the usage scenarios.
 * Conditions we use in context of matching condition on entity.
 * Condition is like a predicate but instead of (true | false) you get (passed | throws Error)
 *
 * Read "void" in Query<T, void> as "matched", or "passed".
 */
class Condition {
    constructor(description, fn) {
        this.description = description;
        this.fn = fn;
    }
    async call(entity) {
        await this.fn(entity);
    }
    and(condition) {
        return Condition.and(this, condition);
    }
    or(condition) {
        return Condition.or(this, condition);
    }
    toString() {
        return this.description;
    }
}
exports.Condition = Condition;
(function (Condition) {
    /**
     * Negates condition. Making the negated condition to:
     * - pass (return void) in case original condition would throw Error
     * - throw Error in case original condition would pass (return void)
     *
     * @param {Condition<T>} condition - original condition to be negated
     * @param {string} description - custom description if "not <original description>" version is not enough
     * @returns {Condition<T>}
     */
    Condition.not = (condition, description) => {
        const [isOrHave, ...conditionName] = condition.toString().split(' ');
        return new Condition(description || `${isOrHave} ${isOrHave === 'is' ? 'not' : 'no'} ${conditionName.join(' ')}`, async (entity) => {
            try {
                await condition.call(entity);
            }
            catch (error) {
                return;
            }
            throw new conditionDoesNotMatchError_1.ConditionNotMatchedError();
        });
    };
    /**
     * Combines conditions by logical AND
     *
     * @param {Condition<T>} conditions
     * @returns {Condition<T>}
     */
    Condition.and = (...conditions) => new Condition(conditions.map(utils_1.toString).join(' and '), async (entity) => {
        for (const condition of conditions) {
            await condition.call(entity);
        }
    });
    /**
     * Combines conditions by logical OR
     * @param {Condition<T>} conditions
     * @returns {Condition<T>}
     */
    Condition.or = (...conditions) => new Condition(conditions.map(utils_1.toString).join(' or '), async (entity) => {
        const errors = [];
        for (const condition of conditions) {
            try {
                await condition.call(entity);
                return;
            }
            catch (error) {
                errors.push(error);
            }
        }
        throw new Error(errors.map(utils_1.toString).join('; '));
    });
    /**
     * Transforms conditions array provided as varargs to condition by applying Condition.and
     * @param {Array<Condition<T>>} conditions
     * @returns {Condition<T>}
     */
    Condition.all = (...conditions) => {
        if (conditions.length === 0) {
            throw new Error('at least one condition should be provided as argument to Condition.all');
        }
        return conditions.length > 1
            ? Condition.and(...conditions)
            : conditions[0];
    };
    /**
     * Transforms conditions array provided as varargs to condition by applying Condition.and
     * @param {Array<Condition<T>>} conditions
     * @returns {Condition<T>}
     */
    Condition.allNot = (...conditions) => {
        if (conditions.length === 0) {
            throw new Error('at least one condition should be provided as argument to Condition.all');
        }
        const negated = conditions.map(c => Condition.not(c));
        return conditions.length > 1
            ? Condition.and(...negated)
            : negated[0];
    };
    /**
     * Transforms Conditions (returning (void | throws Error)), combined by AND if more than one,
     * to async Predicate   (returning (true | false))
     * @param {Array<Condition<T>>} conditions
     * @returns {(entity: T) => Promise<boolean>}
     */
    Condition.asPredicate = (...conditions) => (entity) => Condition.all(...conditions).call(entity).then(_ => true, _ => false);
})(Condition = exports.Condition || (exports.Condition = {}));
class Wait {
    constructor(entity, timeout) {
        this.entity = entity;
        this.timeout = timeout;
    }
    async query(fn) {
        return this.for(new Query(fn.toString(), fn));
    }
    async command(fn) {
        return this.for(new Command(fn.toString(), fn));
    }
    async until(fn) {
        return this.for(fn).then(_ => true, _ => false);
    }
    async for(fn) {
        const finishTime = new Date().getTime() + this.timeout;
        while (true) {
            try {
                return await fn.call(this.entity);
            }
            catch (error) {
                if (new Date().getTime() > finishTime) {
                    // todo: should we move this error formatting to the Error class definition?
                    const failure = new timeoutError_1.TimeoutError('\n'
                        + `\tTimed out after ${this.timeout}ms, while waiting for:\n`
                        + `\t${this.entity.toString()}.${fn.toString()}\n` // todo: if string has trailing
                        // and leading spaces it will not be readable
                        + 'Reason:\n'
                        + `\t${error.message}`);
                    throw failure;
                }
            }
        }
    }
}
exports.Wait = Wait;
//# sourceMappingURL=wait.js.map