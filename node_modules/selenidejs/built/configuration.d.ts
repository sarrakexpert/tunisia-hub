import { By, Capabilities, ThenableWebDriver, WebDriver } from 'selenium-webdriver';
import { Browser } from './browser';
import { OnFailureHook } from './wait';
import { Collection } from './collection';
import { Element } from './element';
/**
 * A one place to configure everything.
 * There is no separate Browser, Element or Collection configurations.
 * All corresponding options live here, in Configuration.*
 * It was implemented like this to stay KISS and simplify implementation.
 * Enjoy;)
 */
/**
 * Same as corresponding Capabilities.<browserName> key
 */
declare type BrowserName = 'chrome' | 'edge' | 'firefox' | 'ie' | 'safari';
export declare type OnEntityFailureHook = OnFailureHook<Browser | Element | Collection>;
export declare class Configuration {
    static with(): Customized<Configuration>;
    static withDriver(driver: ThenableWebDriver | (() => ThenableWebDriver)): Customized<Configuration>;
    driver: ThenableWebDriver | undefined;
    timeout: number;
    baseUrl: string;
    setValueByJs: boolean;
    typeByJs: boolean;
    windowWidth: string;
    windowHeight: string;
    fullPageScreenshot: boolean;
    _locationStrategy: (selector: string | By) => By;
    _driver: ThenableWebDriver;
    __getDriver: () => ThenableWebDriver;
    _buildDriver: (config?: Configuration) => ThenableWebDriver;
    _resetDriver: (config?: Configuration) => Promise<void>;
    browserName: BrowserName;
    capabilities: Capabilities | undefined;
    remoteUrl: string | undefined;
    constructor({ driver, _driver, _buildDriver: buildDriver, ...options }?: Partial<Configuration>);
}
export declare class Customized<T> {
    private readonly customizedType;
    static browser(): Customized<Browser>;
    static configuration(): Customized<Configuration>;
    private configuration;
    private constructor();
    build(): T;
    driver(webdriver: WebDriver | ThenableWebDriver | (() => ThenableWebDriver) | (() => WebDriver)): this;
    baseUrl(base: string): this;
    timeout(milliseconds: number): this;
    windowWidth(value: string): this;
    windowHeight(value: string): this;
    setValueByJs(value: boolean): this;
    typeByJs(value: boolean): this;
    fullPageScreenshot(turnedOn: boolean): this;
    _locationStrategy(fn: (selector: string) => By): this;
}
export {};
