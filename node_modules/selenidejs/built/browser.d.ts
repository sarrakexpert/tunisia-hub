/// <reference types="node" />
import { By, ThenableWebDriver } from 'selenium-webdriver';
import { Collection } from './collection';
import { Configuration, Customized } from './configuration';
import { Element } from './element';
import { Assertable, Entity, Matchable } from './entity';
export declare class Browser extends Entity implements Assertable, Matchable {
    static configuredWith(): Customized<Browser>;
    static chromeWith(): Customized<Browser>;
    static chrome(): Browser;
    constructor(configuration?: Partial<Configuration>);
    with(customConfig: Partial<Configuration>): Browser;
    get driver(): ThenableWebDriver;
    toString(): string;
    element(located: (string | By | {
        script: string | ((document: Document) => HTMLElement);
        args?: any[];
    }), customized?: Partial<Configuration>): Element;
    all(located: string | By | {
        script: string | ((document: Document) => HTMLCollectionOf<HTMLElement>);
        args?: any[];
    }, customized?: Partial<Configuration>): Collection;
    executeScript(script: (string | ((document: Document, args?: any[], window?: Window) => any)), ...args: any[]): Promise<unknown>;
    open(relativeOrAbsoluteUrl: string): Promise<Browser>;
    resizeWindow(width: number, height: number): Promise<Browser>;
    screenshot(): Promise<Buffer>;
    closeCurrentTab(): Promise<Browser>;
    quit(): Promise<void>;
    refresh(): Promise<void>;
    back(): Promise<void>;
    forward(): Promise<void>;
    goToNextTab(): Promise<Browser>;
    goToPreviousTab(): Promise<Browser>;
    goToTab(indexOrId: number | string): Promise<Browser>;
    switchToDefaultFrame(): Promise<Browser>;
    clearLocalStorage(): Promise<Browser>;
    clearSessionStorage(): Promise<Browser>;
    clearCookies(): Promise<Browser>;
    get alert(): import("selenium-webdriver").AlertPromise;
}
