import { Configuration } from './configuration';
import { Condition, Lambda, Wait } from './wait';
export interface Assertable {
    should(condition: Condition<this>): Promise<this>;
}
export interface Matchable {
    waitUntil(...conditions: Condition<this>[]): Promise<boolean>;
    matching(condition: Condition<this>): Promise<boolean>;
}
export declare abstract class Entity implements Assertable, Matchable {
    readonly configuration: Configuration;
    protected readonly wait: Wait<this>;
    constructor(configuration: Configuration);
    get config(): Configuration;
    should(...conditions: Condition<this>[]): Promise<this>;
    waitUntil(...conditions: Condition<this>[]): Promise<boolean>;
    matching(...conditions: Condition<this>[]): Promise<boolean>;
    perform(command: Lambda<this, void>): Promise<this>;
    get<R>(query: Lambda<this, R>): Promise<R>;
}
