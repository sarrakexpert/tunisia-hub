"use strict";
// Copyright 2018 Knowledge Expert SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shadow = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
const _1 = require(".");
const configuration_1 = require("./configuration");
const element_1 = require("./element");
const ElementWebElementByJs_1 = require("./locators/ElementWebElementByJs");
const ElementWebElementByLocator_1 = require("./locators/ElementWebElementByLocator");
const ElementWebElementsByJs_1 = require("./locators/ElementWebElementsByJs");
const ElementWebElementsByLocator_1 = require("./locators/ElementWebElementsByLocator");
class Shadow {
    constructor(context, configuration) {
        this.context = context;
        this.configuration = configuration;
        this.context = context;
    }
    element(located, customized) {
        const configuration = customized === undefined
            ? this.configuration
            : new configuration_1.Configuration(Object.assign(Object.assign({}, this.configuration), customized));
        if (located instanceof selenium_webdriver_1.By || typeof located === 'string') {
            const by = located instanceof selenium_webdriver_1.By ? located : this.configuration._locationStrategy(located);
            const locator = new ElementWebElementByLocator_1.ElementWebElementByLocator(by, this.context);
            return new element_1.Element(locator, configuration);
        }
        const locator = new ElementWebElementByJs_1.ElementWebElementByJs(this.context, located.script, located.args);
        return new element_1.Element(locator, configuration);
    }
    all(located, customized) {
        const configuration = customized === undefined
            ? this.configuration
            : new configuration_1.Configuration(Object.assign(Object.assign({}, this.configuration), customized));
        if (located instanceof selenium_webdriver_1.By || typeof located === 'string') {
            const by = located instanceof selenium_webdriver_1.By ? located : this.configuration._locationStrategy(located);
            const locator = new ElementWebElementsByLocator_1.ElementWebElementsByLocator(by, this.context);
            return new _1.Collection(locator, configuration);
        }
        const locator = new ElementWebElementsByJs_1.ElementWebElementsByJs(this.context, located.script, located.args);
        return new _1.Collection(locator, configuration);
    }
}
exports.Shadow = Shadow;
//# sourceMappingURL=shadow.js.map