import { By, WebElement } from 'selenium-webdriver';
import { Collection } from './collection';
import { Configuration } from './configuration';
import { Assertable, Entity, Matchable } from './entity';
import { Locator } from './locators/locator';
import { Shadow } from './shadow';
export declare class Element extends Entity implements Assertable, Matchable {
    readonly locator: Locator<Promise<WebElement>>;
    constructor(locator: Locator<Promise<WebElement>>, configuration: Configuration);
    toString(): string;
    getWebElement(): Promise<WebElement>;
    with(customConfig: Partial<Configuration>): Element;
    element(located: (string | By | {
        script: string | ((element: HTMLElement) => HTMLElement | ShadowRoot);
        args?: any[];
    }), customized?: Partial<Configuration>): Element;
    all(located: string | By | {
        script: string | ((element: HTMLElement) => HTMLCollectionOf<HTMLElement>);
        args?: any[];
    }, customized?: Partial<Configuration>): Collection;
    get parent(): Element;
    get followingSibling(): Element;
    get shadow(): Shadow;
    private get driver();
    executeScript(script: string | ((element: HTMLElement, args?: any[], window?: Window) => any), ...args: any[]): Promise<unknown>;
    click(): Promise<this>;
    clear(): Promise<this>;
    setValue(value: string | number): Promise<this>;
    type(keys: string | number): Promise<this>;
    doubleClick(): Promise<this>;
    hover(): Promise<this>;
    contextClick(): Promise<this>;
    pressEnter(): Promise<this>;
    pressEscape(): Promise<this>;
    pressTab(): Promise<this>;
}
